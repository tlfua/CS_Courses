function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    sum_1 = 0;
    sum_2 = 0;
    for i=1:m
        h = theta'*X(i,:)';
        sum_1 = sum_1 + (h-y(i));
        sum_2 = sum_2 + (h-y(i))*X(i,2);
    end;
    sum_1 = sum_1*(alpha/m);
    sum_2 = sum_2*(alpha/m);

    theta(1,1) = theta(1,1) - sum_1;
    theta(2,1) = theta(2,1) - sum_2;
 
    
    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
    fprintf('J = %f\n', J_history(iter));
end

end
