<?xml version="1.0"?>
<pset>

    <!--
        CS 564, FALL 2018
        PROBLEM SET 1 SUBMISSION TEMPLATE

        Please copy and paste your SQL queries into the appropriate spots below.

        When submitting SQL queries, please do not include the initial
        %sql or %%sql IPython commands. Just include the SQL code.

        DO NOT DELETE THE <![CDATA[ ... ]]> LINES IN EACH <answer> TAG!
        Doing so will break the autograder. To avoid accidentally breaking
        something, please leave all existing comments in this template
        intact in your submission.
    -->

    <student>
        <name>
            <!-- Insert your full name on the line below. -->
            Tien-Lung Fu
        </name>
        <netid>
            <!-- Insert your NetID (NOT your student ID number!) below. -->
            tfu37
        </netid>
        <studentid>
            <!-- Insert your student ID number below. -->
            9079952371
        </studentid>
    </student>


    <!-- BEGIN PROBLEM 1 -->
    <answer number="1a">
        <!-- Paste your solution to problem 1, part (a) below this line. --><![CDATA[
SELECT j AS i, i AS j, val FROM A ORDER BY i, j;

        ]]><!-- End problem 1, part (a). -->
    </answer>
    <answer number="1b">
        <!-- Paste your solution to problem 1, part (b) below this line. --><![CDATA[
SELECT SUM(A.val * B.val)
FROM A, B
WHERE A.j = 1 AND B.j = 2 AND A.i = B.i

        ]]><!-- End problem 1, part (b). -->
    </answer>
    <answer number="1c">
        <!-- Paste your solution to problem 1, part (c) below this line. --><![CDATA[
SELECT SUM(A.val * B.val)
FROM A, B
WHERE A.i = 1 AND B.j = 2 AND A.j = B.i

        ]]><!-- End problem 1, part (c). -->
    </answer>
    <answer number="1d">
        <!-- Paste your solution to problem 1, part (d) below this line. --><![CDATA[
SELECT A.i, B.j, SUM(A.val * B.val)
FROM A, B
WHERE A.j = B.i
GROUP BY A.i, B.j

        ]]><!-- End problem 1, part (d). -->
    </answer>
    <!-- END PROBLEM 1 -->


    <!-- BEGIN PROBLEM 2 -->
    <answer number="2a">
        <!-- Paste your solution to problem 2, part (a) below this line. --><![CDATA[
WITH Temporary(Store, AllSales)
    AS (SELECT Sales.Store, SUM(Sales.WeeklySales) FROM Holidays, SALES
        WHERE Holidays.IsHoliday = "TRUE" AND Holidays.WeekDate = Sales.WeekDate
        GROUP BY Sales.Store)
SELECT *
FROM Temporary
WHERE AllSales = (SELECT Max(AllSales) FROM Temporary) OR AllSales = (SELECT Min(AllSales) FROM Temporary);

        ]]><!-- End problem 2, part (a). -->
    </answer>
    <answer number="2b">
        <!-- Paste your solution to problem 2, part (b) below this line. --><![CDATA[
WITH nonholidaysales(WeekDate, sales)
    AS (SELECT Sales.WeekDate, SUM(Sales.WeeklySales)
    FROM Holidays, Sales
    WHERE Holidays.IsHoliday = "FALSE" AND Holidays.WeekDate = Sales.WeekDate
    GROUP BY Sales.WeekDate),
holidaynum(num)
    AS (SELECT COUNT(Holidays.WeekDate)
    FROM Holidays
    WHERE Holidays.IsHoliday = "TRUE"),
holidaysales(sales)
    AS (SELECT SUM(Sales.WeeklySales)
    FROM Holidays, Sales
    WHERE Holidays.IsHoliday = "TRUE" AND Holidays.WeekDate = Sales.WeekDate)
SELECT COUNT(nonholidaysales.WeekDate) AS NumNonHolidays
FROM nonholidaysales, holidaysales,holidaynum
WHERE nonholidaysales.sales > (holidaysales.sales/holidaynum.num);

        ]]><!-- End problem 2, part (b). -->
    </answer>
    <answer number="2c">
        <!-- Paste your solution to problem 2, part (c) below this line. --><![CDATA[
SELECT Stores.type, SUBSTR(Sales.WeekDate,6,2) AS Month, SUM(Sales.WeeklySales) AS TotalSales
FROM Stores, Sales
WHERE Sales.Store = Stores.store
GROUP BY Stores.type, Month;

        ]]><!-- End problem 2, part (c). -->
    </answer>
    <answer number="2d">
        <!-- Paste your solution to problem 2, part (d) below this line. --><![CDATA[
CREATE TABLE IF NOT EXISTS Results(
AttributeName VARCHAR(20),
CorrelationSign Integer
);
INSERT INTO Results VALUES('Temperature', 4);
INSERT INTO Results VALUES('FuelPrice', 3);
INSERT INTO Results VALUES('CPI', 2);
INSERT INTO Results VALUES('UnemploymentRate', 1);

WITH Results2(AttributeName, CorrelationSign, x) AS (
    WITH Average(temperature, fuelprice, cpi, unemploymentrate) AS
    (SELECT AVG(TemporalData.Temperature), AVG(TemporalData.FuelPrice), AVG(CPI), AVG(UnemploymentRate)
    FROM TemporalData),
    Averagesales(sales) AS
    (SELECT AVG(Sales.WeeklySales)
    FROM Sales, TemporalData
    WHERE Sales.Store = TemporalData.Store AND Sales.WeekDate = TemporalData.WeekDate)
    SELECT Results.AttributeName, CAST(ABS(SUM((Td.Temperature - Average.temperature)*(S.weeklysales - Averagesales.sales)))/SUM((Td.Temperature - Average.temperature)*(S.weeklysales - Averagesales.sales)) AS INT) AS Sign, 4
    FROM Average, Results, TemporalData AS Td, Sales AS S, Averagesales
    WHERE Results.AttributeName = 'Temperature' AND Td.WeekDate = S.WeekDate AND Td.Store = S.Store
    UNION
    SELECT Results.AttributeName, CAST(ABS(SUM((Td.FuelPrice - Average.fuelprice)*(S.weeklysales - Averagesales.sales)))/SUM((Td.FuelPrice - Average.fuelprice)*(S.weeklysales - Averagesales.sales)) AS INT) AS Sign, 3
    FROM Average, Results, TemporalData AS Td, Sales AS S, Averagesales
    WHERE Results.AttributeName = 'FuelPrice' AND Td.WeekDate = S.WeekDate AND Td.Store = S.Store
    UNION
    SELECT Results.AttributeName, CAST(ABS(SUM((Td.CPI - Average.cpi)*(S.weeklysales - Averagesales.sales)))/SUM((Td.CPI - Average.cpi)*(S.weeklysales - Averagesales.sales)) AS INT) AS Sign, 2
    FROM Average, Results, TemporalData AS Td, Sales AS S, Averagesales
    WHERE Results.AttributeName = 'CPI' AND Td.WeekDate = S.WeekDate AND Td.Store = S.Store
    UNION
    SELECT Results.AttributeName, CAST(ABS(SUM((Td.UnemploymentRate - Average.unemploymentrate)*(S.weeklysales - Averagesales.sales)))/SUM((Td.UnemploymentRate - Average.unemploymentrate)*(S.weeklysales - Averagesales.sales)) AS INT) AS Sign, 1
    FROM Average, Results, TemporalData AS Td, Sales AS S, Averagesales
    WHERE Results.AttributeName = 'UnemploymentRate' AND Td.WeekDate = S.WeekDate AND Td.Store = S.Store)
SELECT Results2.AttributeName, CorrelationSign
FROM Results2
ORDER BY x DESC;

        ]]><!-- End problem 2, part (d). -->
    </answer>
    <!-- END PROBLEM 2 -->


    <!-- BEGIN PROBLEM 3 -->
    <answer number="3a">
        <!-- Paste your solution to problem 3, part (a) below this line. --><![CDATA[
SELECT Streets.B AS company, Streets.d AS distance
FROM Streets
WHERE Streets.A = "UW-Madison" AND Streets.d <= 10
UNION
SELECT Streets2.B AS company, (Streets1.d + Streets2.d) AS distance
FROM Streets AS Streets1, Streets AS Streets2
WHERE Streets1.A = "UW-Madison" AND Streets1.B = Streets2.A AND (Streets1.d+Streets2.d) <= 10
UNION
Select Streets3.B AS company, (Streets1.d + Streets2.d + Streets3.d) AS distance
FROM Streets AS Streets1, Streets AS Streets2, Streets AS Streets3
WHERE Streets1.A = "UW-Madison" AND Streets1.B = Streets2.A AND Streets2.B = Streets3.A AND (Streets1.d + Streets2.d + Streets3.d) <= 10;

        ]]><!-- End problem 3, part (a). -->
    </answer>
    <answer number="3b">
        <!-- Paste your solution to problem 3, part (b) below this line. --><![CDATA[
SELECT S1.A AS company_1, S2.B AS company_2, S1.d + S2.d AS distance
FROM Streets AS S1, Streets AS S2
WHERE S1.B = "UW-Madison" AND S2.A = "UW-Madison" AND (S1.d + S2.d) <=15 AND NOT S1.A = S2.B
UNION
SELECT S1.A AS company_1, S3.B AS company_2, S1.d + S2.d + S3.d AS distance
FROM Streets AS S1, Streets AS S2, Streets AS S3
WHERE (S1.B = "UW-Madison" OR S2.B = "UW-Madison") AND NOT S1.A = "UW-Madison" AND NOT S3.B = "UW-Madison" AND S1.B = S2.A AND S2.B = S3.A AND (S1.d + S2.d + S3.d) <= 15 AND NOT S1.A = S3.B;

        ]]><!-- End problem 3, part (b). -->
    </answer>
    <answer number="3c">
        <!-- Paste your solution to problem 3, part (c) below this line. --><![CDATA[
DELETE FROM Streets
WHERE Streets.id =
    (SELECT S2.id
    FROM Streets AS S2, Streets AS S3, Streets AS S4
    WHERE S2.B = S3.A AND S3.B = S4.A AND S4.B = S2.A );

        ]]><!-- End problem 3, part (c). -->
    </answer>
    <answer number="3d">
        <!-- Paste your solution to problem 3, part (d) below this line. --><![CDATA[
WITH RECURSIVE
    distance_table(origin,A,B,distance) AS (
        SELECT S1.B,"", S1.B, 0 FROM Streets AS S1 GROUP BY S1.B
        UNION
        SELECT DT.origin,DT.B, S2.B, (DT.distance + S2.d)
        FROM distance_table AS DT, Streets AS S2
        WHERE DT.B = S2.A AND NOT S2.B = DT.A)
SELECT DT1.origin AS A, DT1.B, MAX(DT1.distance) AS distance FROM distance_table AS DT1 LIMIT 1;

        ]]><!-- End problem 3, part (d). -->
    </answer>
    <!-- END PROBLEM 3 -->


</pset>
